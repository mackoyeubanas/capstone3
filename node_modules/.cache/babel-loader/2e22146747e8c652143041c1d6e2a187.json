{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Microsoft\\\\Documents\\\\capstone3\\\\capstone3\\\\src\\\\components\\\\map.jsx\";\n\n/* Location/Map page */\nimport React from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport LocationServiceApi from '../api/LocationServiceApi.js';\nimport \"../styles/map.css\";\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.mapOnMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.mapOnClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.mapOnMapClick = () => this.setState({\n      showingInfoWindow: false,\n      selectedPlace: {},\n      activeMarker: {}\n    });\n\n    this.state = {\n      locations: [],\n      activeMarker: {},\n      showingInfoWindow: false,\n      selectedPlace: {}\n    };\n  }\n\n  componentDidMount() {\n    // obtain all locations\n    let location_array = this.state.locations; // Get all locations from backend\n\n    LocationServiceApi.getAllLocations().then(res => {\n      const data = res.data; // Iterate through each address and get latitude and longitude\n\n      data.forEach(element => {\n        LocationServiceApi.getGeocodeFromAddress(element.address).then(res => {\n          // Create object with address, latitude and longitude\n          let object = {\n            id: element._id,\n            address: element.address,\n            name: element.name,\n            lat: res.data.results[0].geometry.location.lat,\n            lng: res.data.results[0].geometry.location.lng,\n            cars: element.cars\n          }; // Push address, lat, long as object to react state array\n\n          location_array.push(object);\n          this.setState({\n            locations: location_array\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"100vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: -1.2884,\n        lng: 36.8233\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Kenyatta International Convention Centre',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlace.name)))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_API_KEY\n})(MapContainer);","map":{"version":3,"sources":["C:/Users/Microsoft/Documents/capstone3/capstone3/src/components/map.jsx"],"names":["React","Map","InfoWindow","Marker","GoogleApiWrapper","LocationServiceApi","mapStyles","width","height","MapContainer","Component","constructor","props","mapOnMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","mapOnClose","state","mapOnMapClick","locations","componentDidMount","location_array","getAllLocations","then","res","data","forEach","element","getGeocodeFromAddress","address","object","id","_id","name","lat","results","geometry","location","lng","cars","push","render","google","onMarkerClick","onClose","apiKey","process","env","REACT_APP_API_KEY"],"mappings":"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","sourcesContent":["/* Location/Map page */\r\nimport React from 'react';\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nimport LocationServiceApi from '../api/LocationServiceApi.js';\r\nimport \"../styles/map.css\";\r\n\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\n\r\n\r\nexport class MapContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      locations: [],\r\n      activeMarker: {},\r\n      showingInfoWindow: false,\r\n      selectedPlace: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // obtain all locations\r\n    let location_array = this.state.locations;\r\n    // Get all locations from backend\r\n    LocationServiceApi.getAllLocations().then(res => {\r\n      const data = res.data;\r\n      // Iterate through each address and get latitude and longitude\r\n      data.forEach(element => {\r\n        LocationServiceApi.getGeocodeFromAddress(element.address)\r\n          .then(res => {\r\n            // Create object with address, latitude and longitude\r\n            let object = {\r\n              id: element._id,\r\n              address: element.address,\r\n              name: element.name,\r\n              lat: res.data.results[0].geometry.location.lat,\r\n              lng: res.data.results[0].geometry.location.lng,\r\n              cars: element.cars\r\n            };\r\n            // Push address, lat, long as object to react state array\r\n            location_array.push(object);\r\n            this.setState({\r\n              locations: location_array\r\n            });\r\n          });\r\n      });\r\n    });\r\n  }\r\n\r\n  mapOnMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true,\r\n    });\r\n\r\n  mapOnClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  mapOnMapClick = () =>\r\n    this.setState({\r\n      showingInfoWindow: false,\r\n      selectedPlace: {},\r\n      activeMarker: {}\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: \"100vh\" }}>\r\n         <Map\r\n        google={this.props.google}\r\n        zoom={14}\r\n        style={mapStyles}\r\n        initialCenter={\r\n          {\r\n            lat: -1.2884,\r\n            lng: 36.8233\r\n          }\r\n        }\r\n      >\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          name={'Kenyatta International Convention Centre'}\r\n        />\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n        >\r\n          <div>\r\n            <h4>{this.state.selectedPlace.name}</h4>\r\n          </div>\r\n        </InfoWindow>\r\n      </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: process.env.REACT_APP_API_KEY\r\n})(MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}