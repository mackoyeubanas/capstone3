{"ast":null,"code":"/* User service APIs */\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nconst api_url = process.env.server_url || \"https://pure-river-82205.herokuapp.com/api/users\"; // for user JWT storage\n\nexport const TOKEN_SESSION_ATTRIBUTE_NAME = 'token';\nexport const TOKEN_HEADER_LENGTH = 7;\n\nclass UserServiceApi {\n  getAllUsers() {\n    return axios.get(api_url);\n  }\n\n  getAllCustomers() {\n    return axios.get(api_url + '/customers', {\n      headers: {\n        authorization: this.getUserToken()\n      }\n    });\n  }\n\n  getUserFromId(id) {\n    return axios.get(`${api_url}/${id}`, {\n      headers: {\n        authorization: this.getUserToken()\n      }\n    });\n  }\n\n  checkEmailExists(email) {\n    return axios.post(`${api_url}/email`, email);\n  }\n\n  createNewUser(newUser) {\n    return axios.post(api_url, newUser);\n  }\n\n  loginUser(creds) {\n    return axios.post(`${api_url}/login`, creds);\n  }\n\n  updateUser(user) {\n    return axios.patch(`${api_url}/${user._id}`, user);\n  }\n\n  registerSuccessfulLoginForJwt(token) {\n    localStorage.setItem(TOKEN_SESSION_ATTRIBUTE_NAME, token);\n    this.setupAxiosInterceptors(token);\n  }\n\n  getLoggedInUserID() {\n    let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    if (token === null) return '';\n    return jwt_decode(token.slice(TOKEN_HEADER_LENGTH)).id;\n  }\n\n  getLoggedInUserDetails() {\n    let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    if (token === null) return '';\n    return jwt_decode(token.slice(TOKEN_HEADER_LENGTH));\n  }\n\n  getUserToken() {\n    let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    if (token === null) return '';\n    return token.slice(TOKEN_HEADER_LENGTH);\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n  isUserLoggedIn() {\n    let user = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isUserStaff() {\n    let user = this.getLoggedInUserDetails();\n\n    if (user.usertype === \"admin\" || user.usertype === \"staff\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  isUserAdmin() {\n    let user = this.getLoggedInUserDetails();\n\n    if (user.usertype === \"admin\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  logout() {\n    localStorage.removeItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    window.location.href = `/`;\n  }\n\n}\n\nexport default new UserServiceApi();","map":{"version":3,"sources":["C:/Users/Mark.Eubanas/Documents/capstone3/src/api/UserServiceApi.js"],"names":["axios","jwt_decode","api_url","process","env","server_url","TOKEN_SESSION_ATTRIBUTE_NAME","TOKEN_HEADER_LENGTH","UserServiceApi","getAllUsers","get","getAllCustomers","headers","authorization","getUserToken","getUserFromId","id","checkEmailExists","email","post","createNewUser","newUser","loginUser","creds","updateUser","user","patch","_id","registerSuccessfulLoginForJwt","token","localStorage","setItem","setupAxiosInterceptors","getLoggedInUserID","getItem","slice","getLoggedInUserDetails","interceptors","request","use","config","isUserLoggedIn","isUserStaff","usertype","isUserAdmin","logout","removeItem","window","location","href"],"mappings":"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","sourcesContent":["/* User service APIs */\r\nimport axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst api_url = process.env.server_url || \"https://pure-river-82205.herokuapp.com/api/users\";\r\n\r\n// for user JWT storage\r\nexport const TOKEN_SESSION_ATTRIBUTE_NAME = 'token';\r\nexport const TOKEN_HEADER_LENGTH = 7;\r\n\r\nclass UserServiceApi {\r\n    getAllUsers() {\r\n        return axios.get(api_url);\r\n    }\r\n\r\n    getAllCustomers() {\r\n        return axios.get(api_url + '/customers', { headers: { authorization: this.getUserToken() } });\r\n    }\r\n\r\n    getUserFromId(id) {\r\n        return axios.get(`${api_url}/${id}`, { headers: { authorization: this.getUserToken() } });\r\n    }\r\n\r\n    checkEmailExists(email) {\r\n        return axios.post(`${api_url}/email`, email);\r\n    }\r\n\r\n    createNewUser(newUser) {\r\n        return axios.post(api_url, newUser);\r\n    }\r\n\r\n    loginUser(creds) {\r\n        return axios.post(`${api_url}/login`, creds);\r\n    }\r\n\r\n    updateUser(user) {\r\n        return axios.patch(`${api_url}/${user._id}`, user);\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(token) {\r\n        localStorage.setItem(TOKEN_SESSION_ATTRIBUTE_NAME, token);\r\n        this.setupAxiosInterceptors(token);\r\n    }\r\n\r\n    getLoggedInUserID() {\r\n        let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        if (token === null) return '';\r\n        return jwt_decode(token.slice(TOKEN_HEADER_LENGTH)).id;\r\n    }\r\n\r\n    getLoggedInUserDetails() {\r\n        let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        if (token === null) return '';\r\n        return jwt_decode(token.slice(TOKEN_HEADER_LENGTH));\r\n    }\r\n\r\n    getUserToken() {\r\n        let token = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        if (token === null) return '';\r\n        return token.slice(TOKEN_HEADER_LENGTH);\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token;\r\n                }\r\n                return config;\r\n            }\r\n        )\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = localStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        if (user === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isUserStaff() {\r\n        let user = this.getLoggedInUserDetails();\r\n        if (user.usertype === \"admin\" || user.usertype === \"staff\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isUserAdmin() {\r\n        let user = this.getLoggedInUserDetails();\r\n        if (user.usertype === \"admin\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        window.location.href = `/`;\r\n    }\r\n}\r\n\r\nexport default new UserServiceApi();\r\n"]},"metadata":{},"sourceType":"module"}